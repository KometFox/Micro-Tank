
actor MT_ReloadSystem_Container : CustomInventory
{
  +NOBLOOD
  +DONTGIB
  -PUSHABLE
  +INVENTORY.KEEPDEPLETED
  +INVENTORY.HUBPOWER
  +INVENTORY.QUIET
  -INVBAR
  -COUNTITEM
  +INVENTORY.UNDROPPABLE
  ////+INVENTORY.UNTOSSABLE
  Inventory.Icon "NACOA0"
  Inventory.Amount 1
  Inventory.MaxAmount 2
  -COUNTITEM
  States
  {
  

  PReload:
  TNT1 A 0
  TNT1 A 0 A_Print("Reloading!") 
  TNT1 A 0 A_Giveinventory("MT_P_Reload")
  TNT1 A 0 A_Giveinventory("MT_Reloader")
  TNT1 A 0 A_Giveinventory("MT_ReloadSystem_Container")
  goto Held
 
  NReload:
  TNT1 A 0
  TNT1 A 0 A_Print("Done with Reloading") 
  TNT1 A 0 A_Giveinventory("MT_N_Reload")
  TNT1 A 0 A_Giveinventory("MT_Reloader")
  TNT1 A 0 A_Giveinventory("MT_ReloadSystem_Container")
  goto Held 
 
  Held:
    TNT1 A 1
    loop
  }
}

actor MT_Reloader : MT_ReloadSystem_Container
{
  var int user_reload;
  states
  {
  


  Use:
  TNT1 A 0 A_JumpIfInventory("MT_GunIsReloadable",1,"UseA")
  Goto Error
  
  UseA:
  TNT1 A 0
  TNT1 A 0 A_JumpIfInventory("MT_ReloadDummy",1,"UseBB")
  TNT1 A 0 A_SetUserVar("user_reload",10)
  TNT1 A 0 A_GiveInventory("MT_ReloadDummy",1)
  Goto UseBB
  
  UseBB:
  TNT1 A 0
  TNT1 A 0 A_SetUserVar(user_reload,user_reload+10)
  goto TakeAll
  
  Error:
  TNT1 A 0 A_Log("Cannot Reload")
  Goto Held
  
  TakeAll:  
  TNT1 A 0 A_TakeInventory("MT_P_Reload")
  TNT1 A 0 A_TakeInventory("MT_N_Reload")
  Goto Decide
 
  Decide:
  TNT1 A 0 A_JumpIf(user_reload==10,"PReload")
  TNT1 A 0 A_JumpIf(user_reload==20,"NReload")
  TNT1 A 0 A_JumpIf(user_reload==30,"ResetRCycle")
  Goto Held
   
  ResetRCycle:
  TNT1 A 0 A_SetUserVar("user_reload",10)
  Goto Held
  }
}








