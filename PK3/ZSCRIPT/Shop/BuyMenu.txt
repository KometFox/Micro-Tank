/*
A Class that handles the whole buy menu system.
TODO: Figure out if its possible to automate the column stuff
*/
Class BuyMenuScript : EventHandler
{
	bool Enabled; //If the menu is enabled
	//Elements
	Array<UIElement> Elements; //Array of Elements it has
	Array<int> ElementsRow; //The row each element is at
	int ElementsSel; //The Element it is selected
	int ElementsLastIndex; 
	//Other
	StructKeyArrow KeyArrow; //The Arrow
	PlayerPawn VPlayer;

	Struct StructKeyArrow
	{
		Vector2 Position;	
	}

	//Function for a more easier method to add elements, especially for handling
	//data of it.
	void AddElements(UIElement Thing)
	{
		ElementsLastIndex = Thing.Column;
		Elements.Push(Thing);
	}

	//Function for clearing the UI elements
	void ClearElements()
	{
		Elements.Clear();
	}
	
	override void WorldLoaded(WorldEvent e)
	{
		//Default player
		VPlayer = Players[0].mo;
	}


	//Function for simplified Text display
	ui void AddText(String Text, int pos_x, int pos_y)
	{
		Screen.DrawText(Confont, Font.CR_BLUE, pos_x, pos_y, Text, DTA_VirtualWidth, 720, DTA_VirtualHeight, 480);
	}
	
	ui void AddImage(TextureID tex, int pos_x, int pos_y)
	{
		Screen.DrawTexture(tex, false, pos_x,  pos_y, DTA_KeepRatio, true, DTA_VirtualWidth, 720, DTA_VirtualHeight, 480);
	}

	
	//Display stuff
	ui void RenderTextEntry(int Index)
	{
		if (!(Elements[Index] is "TextEntry"))
			return;
		
		TextEntry Text = TextEntry(Elements[Index]);
		String TheText = Text.Text;
		
		if (ElementsSel == Index)
			TheText = "[" .. Text.Text .. "]";
		
		AddText(TheText, Text.rect_pos.x, Text.rect_pos.y);		
	}
	
	ui void RenderItemsEntry(int Index)
	{
		if (!(Elements[Index] is "GraphicEntry"))
			return;
			
		BuyMenuItems Item = BuyMenuItems(Elements[Index]); 
		TextureID GrSelect = TexMan.CheckForTexture("64BLUSEL", TexMan.Type_Any);

		AddImage(Item.Graphic, Item.rect_pos.x, Item.rect_pos.y);			

		if (ElementsSel == Index)
			AddImage(GrSelect, Item.rect_pos.x, Item.rect_pos.y);	

		DisplayItem();
		
		return;
	}	
	
	//Display information about the selected Item.
	ui void DisplayItem()
	{
		if (!(Elements[ElementsSel] is "BuyMenuItems"))
			return;
			
		BuyMenuItems Pick = BuyMenuItems(Elements[ElementsSel]); 
		
		if (Pick)
		{
			AddText(String.Format("Item: [%s]", Pick.ItemName), 470, 150);
			AddText(String.Format("Amount: [%d]", VPlayer.CountInv(Pick.ID)), 470, 160);
			AddText(String.Format("Cost: [%d]", Pick.Cost), 470, 170);
		}
	}
	
	override void renderOverlay(RenderEvent e)
	{
		if (Enabled == True)
		{
			//Display all the elements
			for (int i = 0; i < Elements.size(); i++)
			{				
				//Display Text
				RenderTextEntry(i);
				
				//Display Items 
				RenderItemsEntry(i);
			}		
		}
	}
	
	//Purchase the items, you good person. 
	void Purchase(BuyMenuItems Item)
	{
		//Failsafe
		if (!Item)
			return;

		int Money = 0; //Good boy points
		Inventory PItem = VPlayer.FindInventory(Item.ID, false); 

		let BMS = MT_MoneyHandler(StaticEventHandler.Find('MT_MoneyHandler'));

			
		//Check for Items
		if (PItem)
		{
			if (VPlayer.CountInv(Item.ID) >= PItem.MaxAmount)
			{
				return;
			}
		}
			
		//Check for Armor
		if (Item.Category == "Armor")
		{
			Actor ArmorP; //Pointer
			BasicArmorPickup ArmorItem; //The casting crap
			Inventory PlayerArmor;
			BasicArmor PlayerArmorCast;
			int PlayerArmorPercent; //BasicArmor calculates armor percenatge differntly
				
			ArmorP = ArmorP.Spawn(Item.ID);
			PlayerArmor = VPlayer.FindInventory("BasicArmor");
			ArmorItem = BasicArmorPickup(ArmorP);
			PlayerArmorCast = BasicArmor(PlayerArmor);
			PlayerArmorPercent = PlayerArmorCast.SavePercent * 100;
								
			//Console.PrintF("Player Armor P: %d", PlayerArmorPercent);
			//Console.PrintF("Item Armor P: %d", ArmorItem.SavePercent);
								
			if (ArmorItem.SavePercent >= PlayerArmorPercent
				&& ArmorItem.SaveAmount <= PlayerArmor.Amount)
			{
				ArmorP.Die(ArmorP, ArmorP);
				return;
			}
				
					
			ArmorP.Die(ArmorP, ArmorP);
		}
			
		//Check for Health
		if (Item.Category == "Health")
		{
			Actor HealthP; //Pointer
			Inventory HealthItem; //The casting crap
				
			HealthP = HealthP.Spawn(Item.ID);
			HealthItem = Inventory(HealthP);
				
			if (VPlayer.Health >= HealthItem.MaxAmount)
			{
				HealthP.Die(HealthP, HealthP);
				return;
			}
				
					
			HealthP.Die(HealthP, HealthP);
		}
			
		//Check for his geld and if he has enough of it, buy it.
		if (VPlayer.CountInv("MT_Credits") >= Item.Cost)
		{
			//Free shit took all my money. 
			if (Item.Cost > 0)
			{
				VPlayer.A_TakeInventory("MT_Credits", Item.Cost);
			}
			
			VPlayer.A_GiveInventory(Item.ID, Item.Amount);
				
			//Play a sound effect too
			if (Item.BuySound)
			{
				S_StartSound(Item.BuySound, CHAN_VOICE, CHANF_UI|CHANF_NOPAUSE, 1.0);
			}
		}
		//else fail
		else
		{
			//AddText("You have not enough money to buy this.", 250, 250);
			return; 
		}


		//Save the money after purchase
		BMS.SaveMoney();
	}
	
	//Lazy alias to reinit the menu stuff
	void ReinitMenu()
	{
		ClearElements();
		InitMenu();
	}
	
	bool CheckElementSize()
	{
		//Double check is double safety
		if (ElementsSel >= 0 && ElementsSel < Elements.Size())	
			return true;
		
		return false;
	}
	
	//Handle the Enter stuff
	void PressEnter()
	{
	
		if (CheckElementSize() == false)
			return;
		
		let Item = Entry(Elements[ElementsSel]);		
		string CMD = Item.Command;

		//The main categories
		if (CMD == "Weapons")
		{
			ReinitMenu();
			//OpenWeaponsMenu();
		}
		
		else if (CMD == "Items")
		{
			ReinitMenu();
			OpenItemsMenu();
		}
		
		//The sub categories
		//Items
		else if (CMD == "Ammo")
		{
			ReinitMenu();
			
			let Obj = new("BM_AmmoItems");
			
			AddItems(Obj);		
		}
	
		else if (CMD == "Supplies")
		{
			ReinitMenu();
			
			let Obj = new("BM_Supplies");
			
			AddItems(Obj);
		}	
		
		//Purchases
		else if (CMD == "Buy")
		{
			//Double check is double safety
			if (CheckElementSize() == false)
				return;
	
			if (Elements[ElementsSel] is "BuyMenuItems")
			{
				let Item = BuyMenuItems(Elements[ElementsSel]);
				
				Purchase(Item);
			}
		}
		
		//Sometimes it fails even here...
		ElementsFailsafe(ElementsSel);		
	}
	
	void AddItems(BMItems Container)
	{
		//Let EventItems = BMItems(Container);
		int Slot; //The Slots for setting row and column 
		
			Container.AddItems();
			
			for (int i = 0; i < Container.ArItems.Size(); i++)
			{
				let SelectedItem = Container.ArItems[i];
				
				if (i < 5)
				{
					SelectedItem.rect_pos.x = 80 + (Slot * 70);
					SelectedItem.rect_pos.y = 60 * 2;
					SelectedItem.Column = 1;
				}
				else if (i < 10)
				{
					SelectedItem.rect_pos.x = 80 + (Slot * 70);
					SelectedItem.rect_pos.y = 60 * 3;
					SelectedItem.Column = 2;
				}
				
				else if (i < 15)
				{
					SelectedItem.rect_pos.x = 80 + (Slot * 70);
					SelectedItem.rect_pos.y = 60 * 4;
					SelectedItem.Column = 3;				
				}

				Slot += 1;

				//Make it 5 slots per row;
				if (Slot >= 5)
				{
					Slot = 0;
				}
				
				AddElements(SelectedItem);
			}
	}
	
	
	//Element selection fail safe
	void ElementsFailsafe(int CurIndex)
	{	
		if (CurIndex >= Elements.Size())
			CurIndex = Elements.Size() -1;
		else if (CurIndex < 0)
			CurIndex = 0;		
			
		ElementsSel = CurIndex;
	}
	
	int GetCurrentRowSize(int Index = 1, int ColumnShift = 0)
	{
		int Amount;
		
		Amount = 0;
		
		if (Index >= Elements.Size())
			Index = Elements.Size() -1;
		else if (Index < 0)
			Index = 0;		
		
		for (int i = 0; i < Elements.Size(); i++)
		{
			if (Elements[i].Column == Elements[Index].Column + ColumnShift)
			{
				Amount += 1;
			}
		}
		
		return Amount;
	}

	//Get the next Element
	void Elements_NextItem()
	{
		ElementsSel += 1;
		ElementsFailsafe(ElementsSel);
	}
	
	//Get the previous Element
	void Elements_PreviousItem()
	{
		ElementsSel -= 1;
		ElementsFailsafe(ElementsSel);
	}
	
	//Get the element below
	void Elements_DownItem()
	{
		int GoingTo;
		int CurrentRowSize;
				
		CurrentRowSize = GetCurrentRowSize(ElementsSel, 0);
		GoingTo = 0;
	
		if (CurrentRowSize == 0)
		{
			GoingTo = ElementsSel + 1;
		}
		else
		{
			GoingTo = CurrentRowSize + ElementsSel;
		}
		
		ElementsSel = GoingTo;
		ElementsFailsafe(ElementsSel);
	}
	
	//Get the element above
	void Elements_UpItem()
	{
		int GoingTo;
		int CurrentRowSize;
	
		CurrentRowSize = GetCurrentRowSize(ElementsSel, 0);
		GoingTo = 0;		
		
		if (CurrentRowSize == 0)
		{
			GoingTo = ElementsSel - 1;
		}
		else
		{
			GoingTo = ElementsSel - GetCurrentRowSize(ElementsSel, -1);
		}

		ElementsSel = GoingTo;
		ElementsFailsafe(ElementsSel);
	}
	
	void CursorMover(string MoveTo)
	{
		if (MoveTo == "RIGHT")
		{
			Elements_NextItem();
		}
		else if (MoveTo == "LEFT")
		{
			Elements_PreviousItem();
		}
		else if (MoveTo == "DOWN")
		{
			Elements_DownItem();
		}
		else if (MoveTo == "UP")
		{
			Elements_UpItem();
		}
	}
	
	
	//Detect player input
	override bool InputProcess (InputEvent e)
	{
	
		//Prevent from sending stuff when the menu is not open...
		if (Enabled == True)
		{
			if (e.Type == InputEvent.Type_KeyDown && e.KeyScan == InputEvent.Key_LeftArrow)		
			{		
				SendNetworkEvent("PRESS_LEFT");
			}
			
			else if (e.Type == InputEvent.Type_KeyDown && e.KeyScan == InputEvent.Key_RightArrow)
			{
				SendNetworkEvent("PRESS_RIGHT");
			}

			else if (e.Type == InputEvent.Type_KeyDown && e.KeyScan == InputEvent.Key_DownArrow)
			{
				SendNetworkEvent("PRESS_DOWN");
			}

			else if (e.Type == InputEvent.Type_KeyDown && e.KeyScan == InputEvent.Key_UpArrow)
			{
				SendNetworkEvent("PRESS_UP");
			}
			
			else if (e.Type == InputEvent.Type_KeyDown && e.KeyScan == InputEvent.Key_Enter)
			{
				SendNetworkEvent("ENTER");
			}		

		}

		return false;	
	}
	
	void FreezePlayer(ConsoleEvent E)
	{
		VPlayer = Players[E.Player].mo;
	}

	void UnfreezePlayer(ConsoleEvent E)
	{
		VPlayer = Players[E.Player].mo;
	}

	//The networking processing.
	override void NetworkProcess(ConsoleEvent e)
	{

		//Menu Opening
		if (e.Name == "BUYMENU")
		{
			if (Enabled == False)
			{
				VPlayer = Players[e.Player].mo;
				
				if (!VPlayer)
					return;
				
				//Initalize the Menu
				InitMenu();

				Enabled = True;
				FreezePlayer(E);
				CallACS("ACS_FreezePlayer");
			}
			else
			{
				//Clear upon closing
				ClearElements();

				Enabled = False;
				UnfreezePlayer(E);
				CallACS("ACS_UnfreezePlayer");
			}
			
		}
		
		//Detect Keys
		if (Enabled == True)
		{
			if (e.Name == "PRESS_LEFT")
			{
				CursorMover("LEFT");
			}
			
			else if (e.Name == "PRESS_RIGHT")
			{
				CursorMover("RIGHT");
			}		

			else if (e.Name == "PRESS_DOWN")
			{
				CursorMover("DOWN");
			}
			
			else if (e.Name == "PRESS_UP")
			{
				CursorMover("UP");
			}
			
			else if (e.Name == "ENTER")
			{
				PressEnter();
			}		
		}		
	
	}	

}
