#library "MTFunction"
//#include "zcommon/gzdoom.acs"
#include "MCom.acs"

//MP/Player constants
#define PLAYER_TID_START 300
//Aux
#define AmmoType_HUD_ID 500
//HUD Scale
#define BIGFONT_HUDX 320
#define BIGFONT_HUDY 640

int vehiclerotation;
//Placeholder for the Pre-Morph health memory
//So that morphing cannot be used for reseting the health
//to spawn amount.
int marineprevioushealth;
int marinepreviousarmor;
int vehicleprevioushealth;
int vehiclepreviousarmor;

//PLAYER 
int player_velx = 0.0;
int player_vely = 0.0;
int player_velz = 0.0;
//Player vertex height
int player_vertex_B0;
int player_vertex_B1;
int player_vertex_A0;
int player_vertex_A1;


//Taunting.
Script "cmd_taunt" (VOID) NET
{
 GiveInventory("cmd_taunt", 1);
}

//Inbuilt search light
script "MTACS_SearchLight" (void) NET
{
    
	while(1)
	{
		//IF ON ITEM
		if (CheckInventory("MT_Light_1") > 0)
		{
			GiveInventory("MT_SearchLight2",1);		
		}
		else 
		{
			Terminate;
		}
		
	//Adding more frames (6-7) to the light emitting bulletpuffs adds a way too
	//long "motion blur" like effect to compensate for delay(2) so a delay of 1
	//will be used instead.
	delay(1);
		 
	}

} 

//Weapon related constants
#Define Cannon_Ammo_MAX 4

//Ammunition upgrade
str AmmoUpg[5]= {
"MTU_APShot_2", 
"MTU_APShot_2", 
"MTU_HEShell_2",
"MTU_ChemShell_2",
"MTU_BuckShotShell_2",
};


/*
[0][0][0] = Weapon Name
	[0][1][0] = Weapon [Weapon Mode]
	[0][1][1] = Weapon [Ammo Name]
	[0][1][2] = Weapon [Ammo Actor]
	[0][1][3] = Weapon [Ammo Upgrade 0]
	[0][1][4] = Weapon [Ammo Upgrade 1]
	[0][1][5] = Weapon [Ammo Upgrade 2]
*/

str AmmoType_Neo[3][6][6] = {
	{ {"MT_105mmCannon"}, 
	  {"MHT_BaseGun_AP", "APHE", "MT_75x500mmAP", "APAMA0", "APAMB0", "APAMC0"},
	  {"MHT_BaseGun_APCR", "U-APFSDS","MT_75x500mmAPCR" , "ACAMA0", "ACAMB0", "ACAMC0"},
	  {"MHT_BaseGun_HE","HEMP", "MT_75x500mmHE", "HEAMA0", "HEAMB0", "HEAMC0"},
	  {"MHT_BaseGun_Chem","Chem","MT_75x500mmChem", "CHAMA0", "CHAMB0", "CHAMC0"}, 
	  {"MHT_BaseGun_Bee","Bee","MT_75x500mmBee", "BHAMA0", "BHAMB0", "BHAMC0"}, },

	{ {"Multi_Purpose_Device"}, 
	  {"MT_MultiPurposeDevice_Repair", "Repair", "MT_Spareparts", "MSPPA0", "MSPPA0", "MSPPA0"},
	  {"MT_MultiPurposeDevice_Reclaim", "Reclaim", "MT_Blankammo","RURMC0", "RURMC0", "RURMC0"}, },
	  
	{ {"MT_QuadMachineGun"}, 
	  {"MT_QuadMachineGun_APSelected", "FMJ", "A_7u62x54mmR", "HUBBA0", "HUBBA0", "HUBBA0"},
	  {"MT_QuadMachineGun_HESelected", "HE","MT_Ammo_7u62x54mmR_HE" , "HEAMA0", "HEAMA0", "HEAMA0"}, },
};


//Mags
str WPN_Barrel[1] = {
"MT_Heavy_Pepperpot_BarrelsLoad"};


//Ammo type icon
#Define MTHUD_CURAMMO_ICO_Y 105
#Define MTHUD_CURAMMO_ICO_X 105
//Current Ammo text
#Define MTHUD_CURAMMO_STR_Y 800.0
#Define MTHUD_CURAMMO_STR_X 950.0
//Current Ammo amount
#Define MTHUD_CURAMMO_Y 500.0
#Define MTHUD_CURAMMO_X 300.0
//Ammo max
#Define MTHUD_CURAMMOMAX_Y 1090.0
#Define MTHUD_CURAMMOMAX_X 958.0
//Current mag size
#Define MTHUD_CURMAG_Y 1083.0
#Define MTHUD_CURMAG_X 958.0
//HUDSize
#Define MTHUD_SIZE_Y 800
#Define MTHUD_SIZE_X 600


//Ammo/Weapon mode display crap
//Sbarinfo is pretty shitty and tedious for this
//And no Graf, I will NOT use ZScript which something Sbarinfo should
//have a better support for it, + I want Zandronum 3.1 compability 
script "MTHUD_Ammo" ENTER
{
	//Weapon related
	int current_weapon, current_ammo, current_ammosize, current_upgrade;
	bool weapon_show;
	weapon_show = false;
	current_weapon = 0;
	current_ammo = 0;
	current_ammosize = 0;
	current_upgrade = 0;
	
	//print(s: "Activator: ", d: PlayerNumber());
	//TODO: Take account for hud_scale > 1.
	//TODO: Take account for magazine,clips and chamber amount.
	while(1)
	{
		//HUD related
		//TODO: Move these 2 calls to somewhere else.
		int resolution_x = GetScreenWidth();
		int resolution_y = GetScreenHeight();


		//First check selected weapon

		/*
		//MANUAL TEST
		if (CheckWeapon(AmmoType_Neo[0][0][0]))
			{
				weapon_show = true;
			}
		else if (CheckWeapon(AmmoType_Neo[1][0][0]))
			{
				weapon_show = true;
			}
		else
				weapon_show = false;
				
		log(s: "FIXED: ", d: weapon_show);
		*/
		
		//New working code
		for (int b = 0; b < 3; b++)
		{
		
			//log(s: "NUMBER: ", d: b);
			if ( CheckWeapon(AmmoType_Neo[b][0][0]) )
				{
					current_weapon = b;
				}
			
			/*
			if ( CheckWeapon(AmmoType_Neo[current_weapon][0][0]) )
				weapon_show = true;
			else
				weapon_show = false;
			*/
		}
		
		//log(s: "WEAPON SHOW: ", d: weapon_show, s: " ", s: AmmoType_Neo[current_weapon][0][0]);
		

								
		if (CheckWeapon(AmmoType_Neo[current_weapon][0][0]))
		{
	
			for (int i0 = 0; i0 < 3; i0++)
			{
				if (CheckWeapon(AmmoType_Neo[i0][0][0]) == 1)
				{
					//log(s: "WEAPON SELECTED: ", s: AmmoType_Neo[current_weapon][0][0]);
				//current_weapon = i0;
				
					for (int i1 = 1; i1 < 6; i1++)					
						if (CheckInventory(AmmoType_Neo[current_weapon][i1][0]) == 1)
						{
							current_ammo = i1;
							//log(s: "WEAPON MODE:", s: AmmoType_Neo[current_weapon][i1][0]);
						}
				
					/*
					for (int i2 = 0; i2 < 4; i2++)
						if (CheckInventory(AmmoType_Neo[current_weapon][i1][0]) == 1)
						{
							current_ammo = i1;
							//log(s: "WEAPON MODE:", s: AmmoType_Neo[current_weapon][i1][0]);
						}
					*/
										
				}

			}
	
			if (CheckInventory(AmmoUpg[current_ammo -1]) == 2)
					current_upgrade = 3;
			else if (CheckInventory(AmmoUpg[current_ammo -1]) == 1 )
					current_upgrade = 2;	
			else if (CheckInventory(AmmoUpg[current_ammo -1]) == 0 )
					current_upgrade = 1;
			else
					current_upgrade = 1;
		
			//log(s: AmmoType_Neo[current_weapon][current_ammo][0], s: AmmoUpg[current_ammo -1], s: "upg ", d: current_ammo -1);
	
			//log(s: "WEAPON UPGRADE:", s: AmmoType_Neo[current_weapon][current_ammo][0], s: " - ",  s: AmmoType_Neo[current_weapon][current_ammo][2 + current_upgrade]);

			//Ammo Display
			SetFont(AmmoType_Neo[current_weapon][current_ammo][2 + current_upgrade]);
			ADVHudMessage(resolution_x - 105.0, resolution_y - 105.0, AmmoType_HUD_ID, StrParam(s:"A"), ALIGN_CENTER, ALIGN_RIGHT, FOREVER);		
		
			//Ammo Count
			SetFont("BIGFONT2");
			ADVHudMessage(resolution_x - 210.0, resolution_y - 130.0, AmmoType_HUD_ID+1, StrParam(d: CheckInventory(AmmoType_Neo[current_weapon][current_ammo][2])), ALIGN_CENTER, ALIGN_RIGHT, FOREVER);
				
			//Ammo Max Count
			SetFont("BIGFONT2");
			ADVHudMessage(resolution_x - 155.0, resolution_y - 130.0, AmmoType_HUD_ID+2, StrParam(d: GetMaxInventory(0, AmmoType_Neo[current_weapon][current_ammo][2])), ALIGN_CENTER, ALIGN_RIGHT, FOREVER);
				
			//Ammo Name
			SetFont("BIGFONT");
			HMUSRedux(resolution_x - 190.0, resolution_y - 100.0, StrParam(s:AmmoType_Neo[current_weapon][current_ammo][1]), ALIGN_CENTER, ALIGN_RIGHT, AmmoType_HUD_ID+3, FOREVER, 0);
						
			//Ammo Size Count
		}
	
		//If it doesn't use ammo/weapon mode then it shouldn't
		//display anything.		
		
		else if ( (weapon_show = false) | (!CheckWeapon(AmmoType_Neo[current_weapon][0][0])) )
		{
			//log(s: "WEAPON SHOW: FALSE", d: weapon_show);
			SetFont("");
			HudMessage(s:"";HUDMSG_PLAIN, AmmoType_HUD_ID, CR_BLUE, 0, 0, 0);
			SetFont("");
			HudMessage(s:"";HUDMSG_PLAIN, AmmoType_HUD_ID+1, CR_BLUE, 0, 0, 0);
			SetFont("");
			HudMessage(s:"";HUDMSG_PLAIN, AmmoType_HUD_ID+2, CR_BLUE, 0, 0, 0);
			SetFont("");
			HudMessage(s:"";HUDMSG_PLAIN, AmmoType_HUD_ID+3, CR_BLUE, 0, 0, 0);
			SetFont("");
			HudMessage(s:"";HUDMSG_PLAIN, AmmoType_HUD_ID+4, CR_BLUE, 0, 0, 0);
			SetFont("");
			HudMessage(s:"";HUDMSG_PLAIN, AmmoType_HUD_ID+6, CR_BLUE, 0, 0, 0);
		}

		Delay(2);
	}

} 



//Used to add firing delay for cannons so that players can use other
//weapons in the meanwhile 
str delayer[4] = {
//MBT Cannon

//MBT Weapon

//Heavy Cannon
"I_75mmReloadTimer1", "I_75mmReloadTimer2",
//Heavy Weapon
"MT_Heavy_Pepperpot_ReloadTimer1", "MT_Heavy_Pepperpot_ReloadTimer2"};


script "MT_Wfiring_delay" (int Item, int duration) 
{
	
	//print(s: "A ", s: delayer[0]);
	
	//GiveInventory(delayer[Item], 1);

	while(True)
	{
			
		GiveInventory(delayer[Item], 1);
		
			if(CheckInventory(delayer[Item]) >= duration)
			{
				GiveInventory("75mmReloaded", 1);
				TakeInventory(delayer[Item], 9999);
				Terminate;
			}
		Delay(1);
	}

}


script "MT_NewMap" OPEN 
{
//ZANDRONUM
//This is highly neccessary so movement buttons can be used for Menus 
//	ConsoleCommand("compat_clientssendfullbuttoninfo 1");
	TakeInventory("MT_MorphVCrewToken",999);
	
//Remove a few unneccesary token on map change
	TakeInventory("MT_FirstMorph", 999);

//When the player got the Menu open and enters a map
//He gets stuck, this ACS removes this bug.
	If(!CheckInventory("ImCrafting"))
	{
	    TakeInventory("ImCrafting",1);
		SetPlayerProperty(TRUE, FALSE, PROP_TOTALLYFROZEN);
	    SetPlayerProperty(TRUE, FALSE, PROP_FROZEN);
	}
//Sometimes Cannons get stuck at firing
	for (int i = 0; i < 5; i++)
	{
		TakeInventory(delayer[i],999);
	}
}

//Ugly hack to fix the Morph To Marine health reset bug on map change
//when the player is morphed
//TODO: Fix the bug on changemap command
script "MT_MorphFixer" UNLOADING
{
	//log(s: "AAAAAA");
	if (CheckInventory("MT_MorphVCrewToken") == 1)
		{
			/*
			log(s: "FUGGEN");
			ACS_NamedExecuteWithResult("MT_MorphToMarine", 0);
			*/
			//log(s: "FUGGEN");
			SetActorProperty(PlayerNumber(), APROP_Health, vehicleprevioushealth);
			TakeInventory("MT_MorphVCrewToken",999);
		}
	delay(5);
}



//Script to force use a specific item
script "MT_AmmoSwitch_Reverse" (VOID) NET
{
	UseActorInventory(0, "MT_AmmoSwitcher");
}

//Script to force use a specific item
script "MT_SubgunSwitch_Reverse" (VOID) NET
{
	UseActorInventory(0, "MT_SubgunSwitcher");
}

//Script to check if a item is exactly one,
//Zandronum doesn't support CountInv 
script "MT_IsItemOne" (int item) 
{
		//str items[1];
		str items[1] = {"MHT_BaseGun_AmmoSlot"};
		
		printbold(d: CheckInventory("MHT_BaseGun_AmmoSlot"));
		if (CheckActorInventory(0, items[item]) == 1)
		{
			SetResultValue(1);
			//Return True;
		}
		else 
			SetResultValue(0);

}



//Some fucking Multiplayer shit.
/*
script "MT_MPShit1" ENTER
{
  Thing_ChangeTID(0,PLAYER_TID_START+PlayerNumber());
}

script "MT_MPShit2" RESPAWN
{
  // Make sure our old dead body doesn't still have our tid
  Thing_ChangeTID(PLAYER_TID_START+PlayerNumber(),0);
  Thing_ChangeTID(0,PLAYER_TID_START+PlayerNumber());
}
*/

//------------------------------------------------------------------------------
//CVAR
//------------------------------------------------------------------------------
script "MT_CVAR_Things" (void)
{
    SetResultValue(GetCVar("mtcvar_creditstart"));
}

script "MT_GiveMoni" ENTER
{
	If (CheckInventory("MT_ClassToken") == 1)
	{
		if(GetCVar("mtcvar_creditstart") > 0 )
		{
			GiveInventory("MT_Credits", GetCVar("mtcvar_creditstart"));	
		}
		if(GetCVar("mtcvar_metalstart") > 0 )
		{
			GiveInventory("MT_Metal", GetCVar("mtcvar_metalstart"));
		}	
		
		if( GetCvar("mtcvar_techwars") > 0 )
		{
			GiveInventory("MT_AllTech", 1);
		}
	}
	GiveInventory("MT_ClassToken", 1);
	Terminate;
}


//Morph to Marine function
//Probably needs some more refining
//TODO: Fix marine health going to 0 when switching next map
//TODO: Multiplayer compat
script "MT_MorphToMarine" (VOID) NET
{


	//Morph to marine
 	 if (!CheckInventory("MT_MorphVCrewToken") & CheckInventory("MT_ClassToken") > 0)
		{
			vehicleprevioushealth = GetActorProperty(PlayerNumber(), APROP_Health);
			vehiclepreviousarmor = CheckInventory("StoredArmorInsideVehicle");
	
			GiveInventory("MT_MorphVCrewToken", 1);
			
			delay(1);

			MorphActor(PlayerNumber(), "MT_MorphPlayer", "", 0xFFFFFF, 0, "", "");
			GiveInventory("StoredArmorInsideVehicle", marinepreviousarmor);		
	
			if (!CheckInventory("MT_FirstMorph")) 
				{
					//Initial morphing
					marineprevioushealth = 200;
					SetActorProperty(PlayerNumber(), APROP_Health, marineprevioushealth);
				}
			else
				{
					//Guarantee at least 110 HP...
					if (marineprevioushealth < 110)
					{
						marineprevioushealth = 110;
					}
					SetActorProperty(PlayerNumber(), APROP_Health, marineprevioushealth);
				}
			GiveInventory("MT_FirstMorph", 1);
		}
	//Morph to tank
	else if (CheckInventory("MT_ClassToken") > 0)
		{
			//Health, Armor
			vehiclepreviousarmor = CheckInventory("StoredArmorInsideVehicle");
			//Angle
			//int vehiclepreviousbaseangle = GetUserVariable(0, "user_chassisangle");
			//int vehiclenewangle = GetActorAngle(0);
			//log(s: "OLD ANGLE: ", d: vehiclenewangle);
			//vehiclenewangle = vehiclenewangle / 182;
			//log(s: "NEW ANGLE: ", d: vehiclenewangle);
			
			delay(1);
			UnMorphActor(PlayerNumber(), 0);
			//Health, Armor
			SetActorProperty(PlayerNumber(), APROP_Health, vehicleprevioushealth);
			GiveInventory("StoredArmorInsideVehicle", vehiclepreviousarmor);
			//Angle
			//ACS_NamedExecuteWithResult("MT_SetVehicleRotation", vehiclenewangle);	
			//SetUserVariable(0, "user_chassisangle", vehiclenewangle);
			TakeInventory("MT_MorphVCrewToken", 999);
		}
		
	else
		{
			HudMessage(s:"\cfOnly available for Micro Tank classes.";HUDMSG_FADEOUT,PlayerNumber(),CR_Blue,0.5,0.7,2.0,2.0);
		}
 
 }

//Check max player health
script "MT_CheckMaxHealth" (VOID) 
{
	if (GetActorProperty(0, APROP_HEALTH) == GetActorProperty(0, APROP_SPAWNHEALTH))
		{
			SetResultValue(1);
		}
	else
		{
			SetResultValue(0);
		}
}

//Map Initzalization
script "MTACS_RotationSpawn"
{
	SetResultValue(GetActorAngle(0));
}

script "MT_SetVehicleRotation" (int degree) 
{
	vehiclerotation = degree;
}

script "MT_GetVehicleRotation" (VOID) 
{
	SetResultValue(vehiclerotation);
}

script "MT_ChangeTid" (int old_tid, int new_tid)
{
	Thing_ChangeTid(old_tid, new_tid);
}

script "MT_ReturnHeight" (int tid)
{
	int z;
	z = 0;
	z = GetActorZ(tid) >> 16;
	//log(s: "HEIGHT:", d: z);
	SetResultValue(z);	
}

//Vector Crap
script "MT_GetVector_X" ()
{
	SetResultValue(player_velx);
}
script "MT_GetVector_Y" ()
{
	SetResultValue(player_vely);
}
script "MT_GetVector_Z" ()
{
	SetResultValue(player_velz);
}
script "MT_SetVector_X" (int X)
{
	player_velx = X;
}
script "MT_SetVector_Y" (int Y)
{
	player_vely = Y;
}
script "MT_SetVector_Z" (int Z)
{
	player_velz = Z;
}

//Player Vertex Stuff
script "MT_Set_Vertex_Height" (int cases, int height)
{
	switch (cases)
	{
		case 1:
		player_vertex_B0 = height;
		break;
		case 2:
		player_vertex_B1 = height;
		break;
		case 3:
		player_vertex_A0 = height;
		break;
		case 4:
		player_vertex_A1 = height;		
		break;
		default:
		Log(s: "Invalid case.");
		break;
	}
}

script "MT_Get_Vertex_Height" (int cases)
{
	switch (cases)
	{
		case 1:
		SetResultValue(player_vertex_B0);
		break;
		case 2:
		SetResultValue(player_vertex_B1);
		break;
		case 3:
		SetResultValue(player_vertex_A0);
		break;
		case 4:
		SetResultValue(player_vertex_A1);
		break;
		default:
		Log(s: "Invalid case.");
		break;
	}
}


//This one causes the Player to morph back to tank with 0 health
//but he can still move and rotate, maybe it can be used for something. 
/*
//Morph to Marine function
script "MT_MorphToMarine" (VOID) NET
{

	//Morph player
 	 if (!CheckInventory("MT_MorphVCrewToken") & CheckInventory("MT_ClassToken"))
		{
			delay(1);
			delay(5);
			SetActorAngle (0, GetActorAngle (261));
			Thing_Move(0, 261, 1);
			GiveInventory("MT_MorphVCrewToken", 1);

			vehicleprevioushealth = GetActorProperty(0, APROP_Health);
			int vehiclepreviousbaseangle = GetUserVariable(0, "user_tankbasedirection");

			MorphActor(0, "MT_MorphPlayer", "", 0xFFFFFF, 0, "", "");

			int resetarmor = CheckInventory("StoredArmorInsideVehicle");
			int resethealth = CheckInventory("StoredHealthInsideVehicle");
			SetActorProperty(0, APROP_Health, resethealth);
			GiveInventory("GiveArmor", resetarmor);
			SetActorProperty(261, APROP_Health, vehicleprevioushealth);
			SetActorProperty(261, APROP_Health, vehicleprevioushealth);
			TakeInventory("StoredHealthInsideVehicle", 9999);
			TakeInventory("StoredArmorInsideVehicle", 9999);
		}
	//Morph tank
	else if (CheckInventory("MT_ClassToken"))
		{
			TakeInventory("MT_MorphVCrewToken", 999);

			SetActorAngle (0, GetActorAngle (261));
			Thing_Move(0, 261, 1);
			vehicleprevioushealth = GetActorProperty(261, APROP_Health);
			GiveInventory("StoredArmorInsideVehicle", playerpreviousarmor);
			GiveInventory("StoredHealthInsideVehicle", playerprevioushealth);
			SetActorProperty(0, APROP_Health, vehicleprevioushealth);
			

			UnMorphActor(0,1);		



			SetActorProperty(0, APROP_Health, vehicleprevioushealth);
		}
	else
		{
			HudMessage(s:"\cfOnly available for Micro Tank classes.";HUDMSG_FADEOUT,PlayerNumber(),CR_Blue,0.5,0.7,2.0,2.0);
		}
 
 
 
 //vehicleprevioushealth = GetActorProperty(261, APROP_Health);
 //GiveInventory("StoredArmorInsideVehicle", playerpreviousarmor);
 //GiveInventory("StoredHealthInsideVehicle", playerprevioushealth);
 //SetActorProperty(0, APROP_Health, vehicleprevioushealth);
 //int thisgunmachinegunammo = CheckActorInventory(261, "HeavyMachinegunAmmo");
 //int thistankammo = CheckActorInventory(261, "TankAmmo");
 //int thisvehicleHelicopterRocketAmmo = CheckActorInventory(261, "HelicopterRocketAmmo");
 //int thisvehicleMechMortarAmmo = CheckActorInventory(261, "MechMortarAmmo");
 //int thisvehicleMechLaserAmmo = CheckActorInventory(261, "MechLaserAmmo");
 //int thisvehicleMechRocketAmmo = CheckActorInventory(261, "MechRocketAmmo");
 //int vehiclepreviousbaseangle = CheckActorInventory(261, "TankBaseDirection");
 //GiveInventory("HeavyMachinegunAmmo", thisgunmachinegunammo);
 //GiveInventory("TankAmmo", thistankammo);
 //GiveInventory("HelicopterRocketAmmo", thisvehicleHelicopterRocketAmmo);
 //GiveInventory("MechMortarAmmo", thisvehicleMechMortarAmmo);
 //GiveInventory("MechLaserAmmo", thisvehicleMechLaserAmmo);
 //GiveInventory("MechRocketAmmo", thisvehicleMechRocketAmmo);
 //SetUserVariable(0, "user_tankbasedirection", vehiclepreviousbaseangle);
 //delay(1);
}
*/

//------------------------------------------------------------------------------
////Main script
//It will initalize other scripts on start
//------------------------------------------------------------------------------
script "MT_Main" (VOID) NET 
{

}
