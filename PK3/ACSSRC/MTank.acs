//ACS code credit: Sgt. Mark IV
#library "MTank"
//#Include "MCom.acs"
#include "zcommon/gzdoom.acs"

/*
int MTACS_RotationSpawn (int none)
{
	return (GetActorAngle(0));
}
*/

script "MTACS_Chassis_Init" 
{
	int defaultchassisangle = ACS_NamedExecuteWithResult("MTACS_RotationSpawn", 0) / 182;

	//Initalization
	//log(s: "CUR ANGLE: ", d: GetUserCVAR(0, "user_chassisangle"));
	//log(s: "DEF ANGLE:", d: defaultchassisangle);
	SetUserCVAR(0, "user_chassisangle", defaultchassisangle);
	ACS_NamedExecuteWithResult("MT_SetVehicleRotation", defaultchassisangle);
	//log(s: "NEW ANGLE: ", d: GetUserCVAR(0, "user_chassisangle"));
	SetResultValue(defaultchassisangle);
}

//Actual Vehicle Control
script "MTACS_Chassis" ENTER
{
 int buttons;
 int chassisangle = GetUserCVAR(0, "user_chassisangle");	
 //int chassisangle = 0;
 int morphangle = 0;

	

	ACS_NamedExecuteWithResult("MTACS_Chassis_Init", 0);

	while (TRUE)
	{
		buttons = GetPlayerInput(-1, INPUT_BUTTONS);
		
		//When the player is morphed.
		if (CheckInventory("MT_MorphVCrewToken"))
		{
			//TODO: Clean it up and use a "morphed" token instead.
			morphangle = GetActorAngle(0) / 182;
			SetUserCVAR(0, "user_chassisangle", morphangle); 
			ACS_NamedExecute("MT_SetVehicleRotation", morphangle);
			
			chassisangle = morphangle;
			ACS_NamedExecute("MT_SetVehicleRotation", chassisangle);			
			//log(s: "MORPH ANGLE:", d: morphangle);
		}
		
		//TODO: Clean it up and use a "morphed" token instead.
		ACS_NamedExecuteWithResult("MT_SetVehicleRotation", chassisangle);
		
		if (!CheckInventory("ImCrafting") & !CheckInventory("MT_MorphVCrewToken"))
		{			
				
		if (buttons & BT_FORWARD)
			{
				ThrustThing(ACS_NamedExecuteWithResult("MT_GetVehicleRotation", 0) * 256 / 360, 1, 0);
				GiveInventory("Accelerate", 1);
			}

		if (buttons & BT_BACK)
			{
				ThrustThing(ACS_NamedExecuteWithResult("MT_GetVehicleRotation", 0) * 256 / 360 + 128, 1, 0);
				GiveInventory("Reverse", 1);
			}
	

		if ( (buttons & BT_MOVELEFT) && (buttons & BT_BACK) )
			{
				GiveInventory("TurnLeft", 1);
				chassisangle -= 4;
				ACS_NamedExecuteWithResult("MT_SetVehicleRotation", chassisangle);
			}
			
		else if (buttons & BT_MOVELEFT)
			{
				//log(s: "TURN LEFT");
				GiveInventory("TurnLeft", 1);
				chassisangle += 5;
				ACS_NamedExecuteWithResult("MT_SetVehicleRotation", chassisangle);
			}


		if ( (buttons & BT_MOVERIGHT) && (buttons & BT_BACK) )
			{
				GiveInventory("TurnRight", 1);
				chassisangle += 4;
				ACS_NamedExecuteWithResult("MT_SetVehicleRotation", chassisangle);
			}
 
		else if (buttons & BT_MOVERIGHT)
			{
				//log(s: "TURN RIGHT");
				GiveInventory("TurnRight", 1);
				chassisangle -= 5;
				ACS_NamedExecuteWithResult("MT_SetVehicleRotation", chassisangle);
			}

		if (chassisangle <= 0) { chassisangle = 360; }
		else if (chassisangle >= 360) { chassisangle = 0; }

		//log(d: chassisangle);
		//log(d: GetUserCVAR(0, "user_chassisangle"));
		}
		
//------------------------------------------------------------------------------
//Chase
//------------------------------------------------------------------------------
	//Chase cheat is on 
		/*
		if (CheckInventory("MT_ChaseCameraToken")) 
			{	
				SetHUDSize(ShaveInt(GetScreenWidth() * 1.0), ShaveInt(GetScreenHeight() * 1.0), false);
				setfont("TNHSA0");
				//hudmessage(s:"A"; HUDMSG_PLAIN, 0, CR_UNTRANSLATED, 0.5, 0.65, 1.0);
				hudmessage(s:"A"; HUDMSG_PLAIN, 998, CR_UNTRANSLATED, 0.5, 0.54, 1.0);		
				//SetCVAR("chase", True);
			}

		else
			{
				TakeInventory("MT_ChaseCameraToken", 99);
				hudmessage(s:""; HUDMSG_PLAIN, 998, CR_UNTRANSLATED, 0.5, 0.57, 1.0);
				//SetCVAR("chase", False);
			}
		*/
		delay(1);		
		TakeInventory("Accelerate", 1);
		TakeInventory("Reverse", 1);
		TakeInventory("TurnRight", 1); 
		TakeInventory("TurnLeft", 1);	

//------------------------------------------------------------------------------
//Cannon timer
//------------------------------------------------------------------------------

	}
}

