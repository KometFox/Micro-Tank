//ACS code credit: Sgt. Mark IV
//871, 877
#library "TONKCONTROL"
#include "zcommon.acs"
#define C_TID		1000	//Default camera tid
#define C_TIDX		1000	//Default camera tid
#define MAX_RX		80 //Maximum radius (or distance from the player)
#define ADJUST_R	12	//Amount to adjust the camera by
#define VIEW_HEIGHT	40.0	//The approximate height of the player's view
#define VIEW_HEIGHTX	32.0	//The approximate height of the player's view
#define VIEW_HEIGHTXMECH	200.0	//The approximate height of the player's view
#define MAX_RXMECH		300	//Maximum radius (or distance from the player)

bool camera_mode[8];		//Variable for turning the camera on or off.
bool camera_mode2[8];		//Variable for turning the camera on or off.



//Cameras and shieeet [877[

Script "MTACS_Chase" (VOID) NET
{
	 if (CheckActorInventory(PlayerNumber(), "MT_ClassToken"))
		{
		SetCVAR("chase", 1);
		delay(15);
		SetCVAR("chase", 0);		
		}
}

Script "MTACS_Veh_CameraOn" (VOID) NET
{

	camera_mode2[PlayerNumber ()] = ON;
    
	//ACS_NamedExecuteAlways ("MTACS_Veh_Camera", 0, PlayerNumber ());
}

Script "MTACS_Veh_CameraOff" (VOID) NET
{
	camera_mode2[PlayerNumber ()] = OFF;
	Thing_Remove (C_TID + PlayerNumber ());
}	

//Delay 1 is too much...
Script "MTACS_CameraChecker" ENTER
{
	//Chase cheat is on 
	//if (GetCVAR("chase"))
	while(True)
	{
		if (CheckInventory("MT_ChaseCameraToken")) 
			{	
				//print(s: "Camera ON: ", d: PlayerNumber());	
				//GiveActorInventory(0, "CameraON", 2);
				setfont("TNHSA0");
				hudmessage(s:"A"; HUDMSG_PLAIN, 0, CR_UNTRANSLATED, 0.5, 0.57, 1.0);		
				SetCVAR("chase", True);
				//camera_mode2[0] = ON;
				//ACS_NamedExecuteAlways("MTACS_Veh_CameraOn", 0);
			}
		else if (!CheckInventory("MT_ChaseCameraToken"))
			{
				//print(s: "Camera OFF: ", d: PlayerNumber());
				//TakeActorInventory(0, "CameraON", 99);
				SetCVAR("chase", False);
				//camera_mode2[0] = OFF;
				ACS_NamedExecuteAlways("MTACS_Veh_CameraOff", 0);
			}
	delay(3);
	}
}


script "MTACS_Stuff" (VOID) NET
{
 delay(1);
 delay(5);
 SetActorAngle (0, GetActorAngle (261));
 Thing_Move(0, 261, 1);
 int vehiclepreviousbaseangle = CheckActorInventory(261, "TankBaseDirection");
 SetUserVariable(0, "user_tankbasedirection", vehiclepreviousbaseangle);
 delay(1);
}

//Actual Vehicle Control

script "MTACS_Chassis" ENTER
{
 int buttons;

	//I don't think there is a better way to do this with ACS
	while (TRUE)
	{
		buttons = GetPlayerInput(-1, INPUT_BUTTONS);
   
		if (buttons & BT_FORWARD)
			{
				GiveInventory("Accelerate", 1);
			}

		if (buttons & BT_BACK)
			{
				GiveInventory("Reverse", 1);
			}
    
		if (buttons & BT_MOVELEFT)
			{
				GiveInventory("TurnLeft", 1);
			}
 
		if (buttons & BT_MOVERIGHT)
			{
				GiveInventory("TurnRight", 1);
			}
	
		delay(1);
		TakeInventory("Accelerate", 1);
		TakeInventory("Reverse", 1);
		TakeInventory("TurnRight", 1); 
		TakeInventory("TurnLeft", 1);
	}
}

